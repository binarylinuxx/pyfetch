#!/usr/bin/env python3
import platform
import os
import socket
import psutil
from datetime import datetime
import configparser
from pathlib import Path
from colorama import Fore, Style, init
import sys
import pwd

# Initialize colorama
init()

def colorize(text, color):
    """Apply color to text using colorama"""
    colors = {
        'red': Fore.RED,
        'green': Fore.GREEN,
        'yellow': Fore.YELLOW,
        'blue': Fore.BLUE,
        'magenta': Fore.MAGENTA,
        'cyan': Fore.CYAN,
        'white': Fore.WHITE,
        'black': Fore.BLACK
    }
    return f"{colors.get(color.lower(), '')}{text}{Style.RESET_ALL}"

def load_config():
    """Load configuration from INI file"""
    config = configparser.ConfigParser()
    
    config['display'] = {
        'show_username': 'true',
        'show_host': 'true',
        'show_os': 'true',
        'show_kernel': 'true',
        'show_uptime': 'true',
        'show_cpu': 'true',
        'show_memory': 'true',
        'show_shell': 'true',
        'show_python': 'true'
    }
    
    config['ascii'] = {
        'art_style': 'pyfetch',
        'color': 'cyan'
    }
    
    config['format'] = {
        'info_prefix': '',
        'info_color': 'white',
        'label_color': 'yellow',
        'title_color': 'magenta',
        'max_width': '60'
    }
    
    # Load config
    config_path = os.path.join(Path.home(), '.config', 'pyfetch', 'config.ini')
    if os.path.exists(config_path):
        config.read(config_path)
    
    return config

def get_username():
    """Get current username"""
    try:
        return pwd.getpwuid(os.getuid()).pw_name
    except:
        return os.getlogin()

def get_kernel():
    """Get kernel version - cleaned up format"""
    version = platform.uname().release
    if "SMP" in version:
        return version.split("SMP")[0] + "SMP"
    elif "#" in version:
        return version.split("#")[0] + "#" + version.split("#")[1].split()[0]
    return version

def get_cpu_info():
    """Get cleaned up CPU information"""
    try:
        with open('/proc/cpuinfo', 'r') as f:
            for line in f:
                if 'model name' in line.lower():
                    # Clean up CPU string
                    cpu = line.split(':')[1].strip()
                    # Remove unnecessary details
                    cpu = cpu.replace('(R)', '').replace('(TM)', '')
                    cpu = cpu.replace('CPU', '').strip()
                    # Shorten if too long
                    if len(cpu) > 30:
                        cpu = ' '.join(cpu.split()[:4]) + '...'
                    return cpu
    except:
        pass
    return platform.processor() or "Unknown"

def get_os_info():
    """Get OS information"""
    try:
        import distro
        return distro.name(pretty=True)
    except:
        return platform.system()

def get_uptime():
    """Get formatted uptime"""
    uptime = datetime.now() - datetime.fromtimestamp(psutil.boot_time())
    days = uptime.days
    hours, rem = divmod(uptime.seconds, 3600)
    mins = rem // 60
    return f"{days}d {hours}h {mins}m" if days else f"{hours}h {mins}m"

def get_memory_usage():
    """Get memory usage percentage"""
    mem = psutil.virtual_memory()
    return f"{mem.percent}% ({round(mem.used/(1024**3),1)}GB/{round(mem.total/(1024**3),1)}GB)"

def main():
    config = load_config()
    max_width = int(config['format']['max_width'])
    
    # Title
    title = "PyFetch - System Information"
    print(colorize(f"\n{title.center(max_width, ' ')}\n", config['format']['title_color']))
    print(colorize("-" * max_width, config['format']['title_color']))
    
    # System info
    info = {}
    if config['display'].getboolean('show_username'):
        info["Username"] = get_username()
    if config['display'].getboolean('show_host'):
        info["Host"] = socket.gethostname()
    if config['display'].getboolean('show_os'):
        info["OS"] = get_os_info()
    if config['display'].getboolean('show_kernel'):
        info["Kernel"] = get_kernel()
    if config['display'].getboolean('show_uptime'):
        info["Uptime"] = get_uptime()
    if config['display'].getboolean('show_cpu'):
        info["CPU"] = get_cpu_info()
    if config['display'].getboolean('show_memory'):
        info["Memory"] = get_memory_usage()
    if config['display'].getboolean('show_shell'):
        info["Shell"] = os.path.basename(os.getenv('SHELL', 'unknown'))
    if config['display'].getboolean('show_python'):
        info["Python"] = f"{platform.python_implementation()} {platform.python_version()}"
    
    # ASCII art
    ascii_art = r"""
     ----
    |*   |_____
  _____        |
 |       ______|
 |_____|  *|
       |___|
    """.split('\n')
    
    # Display
    for i, (key, value) in enumerate(info.items()):
        art_line = ascii_art[i] if i < len(ascii_art) else ""
        line = f"{art_line.ljust(20)} {config['format']['info_prefix']}{colorize(key, config['format']['label_color'])}: {colorize(value, config['format']['info_color'])}"
        print(line)

if __name__ == "__main__":
    main()
